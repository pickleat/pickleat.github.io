{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/elegantFormattingSolution/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Problem: Recieving HTML with nested children of an unknown depth that need to be formatted with CSS classes.</p>\n</blockquote>\n<p>I've had this problem arise twice in the past several weeks. The first occassion I created a quick brute force solution, and the second time I was able to refactor the solution to solve the problem more elegantly and in a far better depth.</p>\n<p>A little about the projects, they are both in <a href=\"http://reactjs.org/\">React</a>, one is Create-React-App and the other is Gatsby, but both use <a href=\"tailwindcss.com\">Tailwind CSS</a>.\nThe first occassion I was working with <a href=\"https://quilljs.com/\">QuillJS</a>, an open-source WYSIWYG editor. It is a very powerful and pretty easy to get used to using. It provides \"pure\" HTML, so a \"Heading 1\" will be an <code>&#x3C;h1></code>, <strong>bold</strong> text is provided wrapped in <code>&#x3C;strong></code> tags, lists are provided in <code>&#x3C;ol></code> and <code>&#x3C;ul></code>, etc...</p>\n<p>Here's an example of what could be provided from a user typing an input in the editor.</p>\n<pre><code class=\"language-html\">&#x3C;div>\n    &#x3C;h1>An Example Heading!&#x3C;/h1>\n    &#x3C;p>&#x3C;br>&#x3C;/p>\n    &#x3C;p>Here's a bunch of paragraph text that shows you\n    &#x3C;strong>how awesome it is&#x3C;/strong>\n    to write here!&#x3C;/p>\n    &#x3C;p>&#x3C;br>&#x3C;/p>\n    &#x3C;p>Here's a list: &#x3C;/p>\n    &#x3C;ul>\n        &#x3C;li>Item&#x3C;/li>\n        &#x3C;li>Another Item&#x3C;/li\n        >&#x3C;li>A Third Item&#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;p>&#x3C;br>&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<p>Easy right? Maybe? If you have a perfect CSS system or if you don't need to apply any classes dynamically...</p>\n<h2>The Brute Force Solution</h2>\n<p>The small problem arises with nesting of elements. You end up with elements nesting 3 or more layers deep. I specifically found a problem of a <code>&#x3C;a></code> nested 3 child elements deep inside a <code>&#x3C;ul></code> > <code>&#x3C;li></code>...\nNot terrible, if you are <strong>sure</strong> of how the elements will be nested. After some looking I started to see patterns and created this first version to solve my problem.</p>\n<p>First I created an object of the classes I wanted to apply to each tag. Reminder: we're using <a href=\"tailwindcss.com\">Tailwind CSS</a> utility classes.</p>\n<pre><code class=\"language-js\"> const quillStyle = {\n    h1: 'text-blue-500 font-bold text-xl',\n    h2: 'text-blue-500 font-bold text-lg',\n    h3: 'text-blue-500 font-bold text-md',\n    a: 'text-teal-600 font-bold',\n    p: 'text-blue-300',\n    ol: 'list-decimal list-inside',\n    ul: 'list-disc list-inside',\n    li: 'pl-2 text-blue-300',\n  }\n</code></pre>\n<p>Then I created the function to recieve objects, and if it matches the <code>tagName</code> and then looking up and apply the corresponding styles.\nAll of this is wrapped in a <code>useEffect()</code> hook because we are gathering the QuillJS WYSIWYG Editor in a form.\nIt looked like this:</p>\n<pre><code class=\"language-js\">useEffect(() => {\n    // Cleans up the text provided by QuillJS wysiwyg\n    function styleChildren(children) {\n      children.forEach((child) => {\n        if (child.tagName === 'H1') {\n          child.classList = quillStyle.h1\n        }\n        if (child.tagName === 'H2') {\n          child.classList = quillStyle.h2\n        }\n        if (child.tagName === 'H3') {\n          child.classList = quillStyle.h3\n        }\n        if (child.tagName === 'P') {\n          child.classList = quillStyle.p\n        }\n        if (child.tagName === 'A') {\n          child.classList = quillStyle.a\n        }\n        if (child.tagName === 'OL') {\n          child.classList = quillStyle.ol\n          let listItems = [...child.children]\n          listItems.forEach((listItem) => {\n            listItem.classList = quillStyle.li\n          })\n        }\n        if (child.tagName === 'UL') {\n          child.classList = quillStyle.ul\n          let listItems = [...child.children]\n          listItems.forEach((listItem) => {\n            listItem.classList = quillStyle.li\n          })\n        }\n        if (child.tagName === 'LI') {\n          child.classList = quillStyle.li\n        }\n      })\n    }\n    var jobDesc = document.getElementById('jobDesc')\n    var jobChildren = [...jobDesc.children]\n    styleChildren(jobChildren)\n    // removed other code that doesn't apply to this post...\n  })\n</code></pre>\n<p>You can see its very much a brute force, and not very elegant. But hey, it got the job done.\nThe struggle initially was that I wasn't sure exactly how deeply nested the html elements would be. However I solved the problem for the time being and moved on to other parts of the application. </p>\n<h2>The More Elegant Solution</h2>","frontmatter":{"title":"Elegantly Formatting Nested Child Elements","date":"2020-05-10"}}},"pageContext":{"slug":"/posts/elegantFormattingSolution/"}}}